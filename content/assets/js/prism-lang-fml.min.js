/*!
 * Prism Language Definition - FHIR Mapping Language (FML)
 * A syntax highlighting plugin for Prism.js
 * @version 0.1.0
 * @author Claude Code
 * @license MIT
 */
!function(e){
// Check if Prism is available
void 0!==e&&(
/**
   * Language definition for FHIR Mapping Language (FML)
   *
   * FHIR Mapping Language is a domain-specific language for transforming
   * data between different FHIR resource formats. This plugin provides
   * comprehensive syntax highlighting for .fml files.
   *
   * Token types implemented:
   * - metadata-comment (/// comments with key-value pairs)
   * - comment (single-line and multi-line)
   * - string (with escape sequences)
   * - structure-keyword (map, uses, group, imports, etc.)
   * - mode-keyword (source, target, queried, produced)
   * - transformation-keyword (for, where, check, then, etc.)
   * - function (built-in transformation functions)
   * - transformation-arrow (->)
   * - rule-label ("name" :)
   * - variable-binding (as keyword)
   * - url (http/https URLs)
   * - path (dot notation paths)
   * - operator (=, !=, <, >, etc.)
   * - number (integers and decimals)
   * - boolean (true, false)
   * - punctuation
   */
e.languages.fml={
// Metadata comments (/// url = 'value')
"metadata-comment":{pattern:/(^|\n)\s*\/\/\/.*$/m,lookbehind:!0,greedy:!0,inside:{"metadata-key":{pattern:/\b\w+(?=\s*=)/,alias:"property"},"metadata-value":{pattern:/=\s*(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,inside:{operator:/=/,string:/(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/}},comment:/\/\/\//}},
// Comments (single-line and multi-line) - must not match metadata comments
comment:[{pattern:/(^|\n)\s*\/\/(?!\/\s*\w+\s*=).*$/m,lookbehind:!0,greedy:!0},{pattern:/\/\*[\s\S]*?\*\//,greedy:!0}],
// Rule labels ("name" :) - must come before strings
"rule-label":{pattern:/"[^"]*"\s*:/,inside:{string:/"[^"]*"/,punctuation:/:/}},
// Strings with escape sequences (including URLs)
string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0,inside:{url:{pattern:/https?:\/\/[^\s"']+/,greedy:!0},escape:/\\(?:[abfnrtv\\"']|\\)/}},
// Structure keywords (map, uses, group, etc.)
"structure-keyword":{pattern:/\b(?:map|uses|group|imports|extends|alias|conceptmap|default)\b/,alias:"keyword"},
// Mode keywords (source, target, etc.)
"mode-keyword":{pattern:/\b(?:source|target|queried|produced)\b/,alias:"keyword"},
// Transformation keywords (for, where, check, then, etc.)
"transformation-keyword":{pattern:/\b(?:for|where|check|then|first|last|share|collate|only_one|not_first|not_last)\b/,alias:"keyword"},
// Built-in transformation functions
function:{pattern:/\b(?:create|copy|truncate|escape|cast|append|translate|reference|dateOp|uuid|pointer|evaluate|cc|c|qty|id|cp|upper|lower|initCap|now|matches|exists|empty|is)\b(?=\s*\()/,greedy:!0},
// Transformation arrow (->)
"transformation-arrow":{pattern:/->/,alias:"operator"},
// Variable binding (as keyword)
"variable-binding":{pattern:/\bas\b/,alias:"keyword"},
// ConceptMap operators
"conceptmap-operator":{pattern:/(?:<<|>>|==)/,alias:"operator"},
// Prefix definitions in ConceptMap
prefix:{pattern:/\bprefix\s+\w+\s*=/,inside:{keyword:/\bprefix\b/,property:/\w+/,operator:/=/}},
// Boolean literals
boolean:/\b(?:true|false)\b/,
// Numbers (integers and decimals)
number:/\b\d+(?:\.\d+)?\b/,
// Path expressions (src.field.subfield)
path:{pattern:/\b\w+(?:\.\w+)+\b/,greedy:!0},
// Logical and comparison operators
operator:/[=!<>]=?|(?:\band\b|\bor\b|\bnot\b)/,
// Function calls and identifiers
identifier:{pattern:/\b[a-zA-Z_]\w*\b/,greedy:!0},
// Punctuation
punctuation:/[{}()[\];,.:|]/},
// Aliases for the language
e.languages.mapping=e.languages.fml,e.languages.structuremap=e.languages.fml)}("undefined"!=typeof global?global.Prism:window.Prism);